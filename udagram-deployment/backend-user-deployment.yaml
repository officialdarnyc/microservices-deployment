apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-user
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend-user
  template:
    metadata:
      labels:
        app: backend-user
    spec:
      containers:
      - name: backend-user
        image: officialdarnyc/udagram-api-user:v1
        imagePullPolicy: IfNotPresent
        volumeMounts:
        # name must match the volume name below
          - mountPath: /etc/.aws-secret-volume
            name: aws-secret-volume
        resources:
          limits:
            memory: "2048Mi"
            cpu: "1000m"
        ports:
        - containerPort: 8080
        env:
          - name: URL
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: URL
          - name: AWS_BUCKET
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: AWS_BUCKET
          - name: AWS_PROFILE
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: AWS_PROFILE
          - name: AWS_REGION
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: AWS_REGION
          - name: POSTGRES_DB
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: POSTGRES_DB
          - name: POSTGRES_HOST
            valueFrom:
              configMapKeyRef:
                name: udagram-config
                key: POSTGRES_HOST
          - name: POSTGRES_USERNAME
            valueFrom:
              secretKeyRef:
                name: udagram-secret
                key: POSTGRES_USERNAME
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: udagram-secret
                key: POSTGRES_PASSWORD
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: udagram-secret
                key: JWT_SECRET
      restartPolicy: Always
      # The secret data is exposed to Containers in the Pod through a Volume.
      volumes:
        - name: aws-secret-volume
          secret:
            secretName: aws-secret
